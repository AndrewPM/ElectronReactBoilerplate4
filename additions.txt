Dll не используется, поэтому
 npm run build:dll  опускаем везде

1. Не отрисовывалось окно
Добавить
webPreferences: {
      nodeIntegration: true,
    },
 в
mainWindow = new BrowserWindow({
   .......
  }
2. Не указано, что нужно установить модуль "uglifyjs-webpack-plugin"  версии  "^1.3.0" - более новый не идет
2.1 Ошибка
  "ERROR in __offline_serviceworker from UglifyJs
    DefaultsError: `warnings` is not a supported option"

 модуль "uglifyjs-webpack-plugin" должен быть версии
   "uglifyjs-webpack-plugin": "^1.3.0",

4. Опечатка
`file://${path.resolve(path.join(__dirname, '..', 'build'))}/index.html`,
должно быть app/build

5. в https://github.com/mjangir/reactron не генерировался пакет установщика из-за
отсутствия  npm install electron-updater@4.0.0

6. Не запускался скриптом "dist":"build"
c версией  "electron-builder": "^21.0.15",
с версией 20.25.0 пошло
npm run install electron-builder@20.25.0 --save-dev
 npm install electron@2.0.8

7. Ошибка
   Not allowed to load local resource
   решилась при помощи
   .... BrowserWindow({
   webPreferences: {
    webSecurity: false
   }
  });


8. Странность -- не предупреждение и не ошибка
   Child html-webpack-plugin for "index.html":
    [1]      1 asset
    [1]     Entrypoint undefined = index.html

реактрон там нет такого сообщения
"html-webpack-plugin": "3.2.0",
этот проект тоже
"html-webpack-plugin": "3.2.0",
 можно игнорировать - это не ошибка

 9. Инсталлированное приложение не отображало index.html
  в режиме ("asar": true) сборщика
  проблема была в том, что в этом случае index.html оказывается внутри архива app.asar/build,
  а путь в main.dev.js  оставался прежним app/build - без архива
  Для того, чтобы оставалась возможность заgускать прод, версию пришлось ввести переменную окружения
  ME_ENV=me
  "start-prod": "cross-env HOT=1 NODE_ENV=production BABEL_ENV=electron ME_ENV=me node --trace-warnings ./node_modules/electron/cli.js -r @babel/register ./app/electron/main.prod.js",
  которая и переключает путь в вариант без архивации.


  10  Ошибка "модуль не найден"
  при выполнении  "lint:eslint": "eslint --ignore-path .gitignore --ignore-pattern internals/scripts",
  Изменил строчку в
  D:\JavaScript\ElectronReactBoilerplate4\.eslintrc.js
  config: './internals/webpack/webpack.prod.babel.js',
  не идет
зачем это
  settings: {
    'import/resolver': {
      webpack: {
        config: './internals/webpack/webpack.prod.babel.js',
      },
    },
  },

  11. Запуск "start" = "start": "cross-env NODE_ENV=production ME_ENV=me electron ./app/"
   запускает  выполнение
    "build" = "build": "concurrently \"npm run build:main\" \"npm run build:renderer\""
   т.е. npm run build:main , затем npm run build:renderer, а затем уже и
   cross-env NODE_ENV=production ME_ENV=me electron ./app/
   т.е. после "start" по умолчанию выполяется  "build", а потом уже то, что в "start" после "="

  12. Отладка возможна в браузере
   запускаем
    "start-renderer-dev" и
    "start-main-dev"  в отдельных окнах
  Средства отладки см. здесь:   https://medium.com/@baphemot/intro-to-debugging-reactjs-applications-67cf7a50b3dd
    console.log(myObject);
    debugger;
    директивы нужно располагать в js коде, но не в jsx( не сработает)
    здесь сработает:
   ......\app\containers\HomePage\saga.js

13. 2+2 = 4

14. Отладка В VSC  - теория
console.log(myObject);
   в VSC
   https://marketplace.visualstudio.com/items?itemName=kodetech.electron-debug
   http://blog.matsu.io/debug-electron-vscode

   Debugging ES6 in Visual Studio Code
   https://medium.com/@drcallaway/debugging-es6-in-visual-studio-code-4444db797954
   Отладка JavaScript в production с помощью Source Maps
   https://getinstance.info/articles/tools/debuggable-javascript-with-source-maps/

   Node.js debugging in VS Code - все о настройках
   https://code.visualstudio.com/docs/nodejs/nodejs-debugging

   https://stackoverflow.com/questions/29971572/how-do-i-add-environment-variables-to-launch-json-in-vscode

15.  -----------------------------------отладка и упаковка -------------------------------------------------
   Как запустить отладчик в VScode
     a) получите main.prod.js.map:
       "start-main-webpack-dev": "cross-env HOT=1 NODE_ENV=development  BABEL_ENV=electron node --trace-warnings -r @babel/register ./node_modules/webpack/bin/webpack --config internals/webpack/webpack.main.prod.js --colors",

     б) Запустите renderer часть приложения:
      "dev": "cross-env START_HOT=1 npm run start-renderer-dev",
         что запустит следующий скрипт:
         "start-renderer-dev": "cross-env NODE_ENV=development node --trace-warnings ./node_modules/webpack-dev-server/bin/webpack-dev-server --config internals/webpack/webpack.dev.babel.js",

     это даст возможность  запускать отладчики одновременно и устанавливать
      точки останова в main и в renderer процессах непосредственно из VScode
      Приложение запускается самим отладчиком.
      Горячая замена в renderer работает.

   Отладка в Chrome
      а) Запустите renderer часть приложения:
      "dev": "cross-env START_HOT=1 npm run start-renderer-dev",
         что запустит следующий скрипт:
         "start-renderer-dev": "cross-env NODE_ENV=development node --trace-warnings ./node_modules/webpack-dev-server/bin/webpack-dev-server --config internals/webpack/webpack.dev.babel.js",

      б) Запустите в новом окне приложение скриптом:
      "start-main-dev": "cross-env HOT=1 NODE_ENV=development ME_ENV=me BABEL_ENV=electron node --trace-warnings ./node_modules/electron/cli.js -r @babel/register ./app/electron/main.dev.js",
      Приложение запустится и в окне Chrome( Инструменты отладчика) можно будет устанавливать точки останова,
         Средства отладки см. здесь:   https://medium.com/@baphemot/intro-to-debugging-reactjs-applications-67cf7a50b3dd
              console.log(myObject); debugger;
              директивы нужно располагать в js коде, но не в jsx( не сработает),
              а здесь сработает: ....\app\containers\HomePage\saga.js
      Возможна отладка только renderer части приложения.
      Горячая замена в renderer работает.

   Запуск приложения в production виде без упаковки

     Выполните скрипты последовательно в одном и том же окне:
    "start-main-prod": "cross-env NODE_ENV=production  BABEL_ENV=electron node --trace-warnings -r @babel/register ./node_modules/webpack/bin/webpack --config internals/webpack/webpack.main.prod.js --colors",
    "start-renderer-prod": "cross-env NODE_ENV=production BABEL_ENV=electron node --trace-warnings -r @babel/register ./node_modules/webpack/bin/webpack --config internals/webpack/webpack.prod.babel.js --colors",
    "start-electron-prod": "cross-env HOT=1 NODE_ENV=production BABEL_ENV=electron ME_ENV=me node --trace-warnings ./node_modules/electron/cli.js -r @babel/register ./app/electron/main.prod.js",
     Отладчики подключаются, но отладка renderer части невозможна

  Создание инсталлятора
    Выполните скрипт:
    "package": "npm run release:clean && npm run build && build  --publish never",
    который запустит следующую цепочку скриптов:

    "release:clean": "rimraf ./release",

    "build": "concurrently \"npm run build:main\" \"npm run build:renderer\"",
    "build:main": "cross-env NODE_ENV=production BABEL_ENV=electron node --trace-warnings -r @babel/register ./node_modules/webpack/bin/webpack --config internals/webpack/webpack.main.prod.js --colors",
    "build:renderer": "cross-env NODE_ENV=production BABEL_ENV=electron node --trace-warnings -r @babel/register ./node_modules/webpack/bin/webpack --config internals/webpack/webpack.prod.babel.js --colors",

    "package-all": "npm run release:clean && npm run build && build -mwl",
    "package-linux": "npm run release:clean && npm run build && build --linux",
    "package-win": "npm run release:clean && npm run build && build --win --x64"

     Инсталлятор будет находиться в корневой папке release.

    Запуск приложения подготовленного для упаковки до самой упаковки
    "start": "cross-env NODE_ENV=production ME_ENV=me electron ./app/"
       сначала запустится  цепочка
          "build": "concurrently \"npm run build:main\" \"npm run build:renderer\"",
          "build:main": "cross-env NODE_ENV=production BABEL_ENV=electron node --trace-warnings -r @babel/register ./node_modules/webpack/bin/webpack --config internals/webpack/webpack.main.prod.js --colors",
          "build:renderer": "cross-env NODE_ENV=production BABEL_ENV=electron node --trace-warnings -r @babel/register ./node_modules/webpack/bin/webpack --config internals/webpack/webpack.prod.babel.js --colors",
         а затем  выполнится и
         "cross-env NODE_ENV=production ME_ENV=me electron ./app/"
          что запустит приложение.

16. Не полностью  функциональная настройка для отладчика VSCode
   { /* не работает в паре  с отладчиком rendrer  */
      "name": "Debug Main Process",
      "type": "node",
      "request": "launch",
      "cwd": "${workspaceRoot}",
      "runtimeExecutable": "${workspaceRoot}/node_modules/.bin/electron",
      "program": "${workspaceRoot}/app/electron/main.dev.js",
      "outFiles": ["${workspaceRoot}/app/electron/**/*.js"],
      "env": {
        "ME_ENV": "me"
      },
      "windows": {
        "runtimeExecutable": "${workspaceRoot}/node_modules/.bin/electron.cmd"
      },
      "args": ["."],
      "outputCapture": "std"
    },

17. Коммуникации между main и  renderer
 Пример отсюда https://electronjs.org/docs/api/ipc-main
 работает.
 Если синхронный вариант не получает ответа в renderer ,
  то отладчик не сможет подконектиться к нему.






